[{"title":"Python 入门笔记","url":"/2025/06/05/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/","content":"算术运算符\n\n\n运算符\n名称\n示例\n结果\n\n\n\n+\n加法\n3 + 2\n5\n\n\n-\n减法\n3 - 2\n1\n\n\n*\n乘法\n3 * 2\n6\n\n\n/\n除法\n3 / 2\n1.5\n\n\n//\n地板除法\n3 // 2\n1 （向下取整）\n\n\n%\n取余（模）\n3 % 2\n1\n\n\n**\n幂运算\n2 ** 3\n8（2 的 3 次方）\n\n\n逻辑运算符1. 与C语言、Java等语言的区别:Python 使用的是：\n\nand,or,not\n而不是：&amp;&amp;,||,!（这是 C &#x2F; Java 风格）\n\n2. 运算优先级（从高到低）\nnot\nand\nor\n\n3. Python的“真值规则”Python中，除了False之外，下列也被当作“假”：\nFalse, None, 0, 0.0, &quot;&quot;, [], &#123;&#125;, set()\n\n其它值都被当作“真”\n4. 非布尔值的“返回值规则”Python中and和or不仅返回True&#x2F;False，还会返回实际对象本身\nprint(0 and 100)         # 0（因为0为假）print(1 and 100)         # 100（因为1为真，所以返回第二个）print([] or &quot;Hello&quot;)     # &quot;Hello&quot;（因为[]为假）\n\n输入1. 单变量n = input()          # 返回字符串n = int(input())     # 返回整数\n\n2. 多变量m, n = input().split()              # 返回字符串m, n = map(int,input().split())     # 返回整数\n\n\n\nsplit()默认按空格分割,也可以用split(&#39;,&#39;)等等自定义分隔符\nmap(int, ...)可以一次性把所有输入转换成整数\n\n\n如果整数、浮点数、字符串在一行中输入，可以这样：\na_str, b_str, c = input().split()a = int(a_str)b = float(b_str)\n\n或者这样：\ninputs = input().split()a = int(inputs[0])b = float(inputs[1])c = inputs[2]\n\n\n如果输入的是不定个数的变量，可以这样：lst = list(map(int, input().split()))\n\n\nsplit()：字符串切割器str.split(sep=None)\n\n\n\n作用：将字符串按指定分隔符拆分成列表（默认是空格）\n返回：List[str]字符串列表\n\n\n&quot;1 2 3 4&quot;.split()      # [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]&quot;1,2,3&quot;.split(&#x27;,&#x27;)     # [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]\n\n\nmap()：批量加工厂（惰性）\nmap(func, iterable)\n\n\n作用：对iterable中每个元素应用func函数\n返回：一个惰性的map object，需要配合list()才能使用结果\n\n\nmap(int, [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;])           # &lt;map object&gt;list(map(int, [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]))     # [1, 2, 3]\n\nlist()：列表构造器\nlist(iterable)\n\n\n作用：把任何iterable转换为列表\n常见用途：展开map()、range()、str()等\n\n\nlist(&quot;abc&quot;)        # [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]list(range(3))     # [0, 1, 2]\n\n输出1. 格式化输出(f-string)name = &quot;哈基米&quot;age = 18print(f&quot;我叫&#123;name&#125;，今年&#123;age&#125;岁&quot;)\n\n可以直接在大括号里运算：\nprint(f&quot;明年我&#123;age + 1&#125;岁&quot;)\n\n可以保留两位小数：\npi = 3.1415926print(f&quot;π ≈ &#123;pi:.2f&#125;&quot;)  # π ≈ 3.14\n\n2. 十进制、八进制、十六进制、二进制之间转换十进制 → 八进制 &#x2F; 十六进制 &#x2F; 二进制# 转八进制（前缀 0o）octal = oct(123)           # &#x27;0o173&#x27;# 转十六进制（前缀 0x）hexadecimal = hex(123)     # &#x27;0x7b&#x27;# 转二进制（前缀 0b）binary = bin(123)          # &#x27;0b1111011&#x27;\n\n输出带前缀，或者输出大写十六进制，可以这样：\nprint(f&quot;&#123;255:x&#125;&quot;)      # ffprint(f&quot;&#123;255:X&#125;&quot;)      # FFprint(f&quot;&#123;255:#x&#125;&quot;)     # 0xffprint(f&quot;&#123;255:#X&#125;&quot;)     # 0XFF\n\n八进制 &#x2F; 十六进制 &#x2F; 二进制 → 十进制只需用int()函数：\n# 八进制字符串转十进制decimal1 = int(&#x27;173&#x27;, 8)         # 123# 十六进制字符串转十进制decimal2 = int(&#x27;7b&#x27;, 16)         # 123# 二进制字符串转十进制decimal3 = int(&#x27;1111011&#x27;, 2)     # 123\n\n传入的参数不带0x或0o，想写带前缀的也行，但必须是合法格式：\nint(&#x27;0x7b&#x27;, 16)     # 123int(&#x27;0o173&#x27;, 8)     # 123\n\n循环结构字符串列表list是一种有序、可变的序列结构，用[]表示\n1. 创建a = [1, 2, 3]a = list(&quot;abc&quot;)     # [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]\n\n2. 索引（含正负索引）正数从左数、负数从右数\na = [10, 20, 30, 40]a[0]      # 10a[-1]     # 40\n\n3. 增删改查\n添加元素：\na = [1, 2]# 加一个元素到末尾a.append(3)          # [1, 2, 3]# 指定索引插入一个元素a.insert(1, 10)      # [1, 10, 2, 3]# 加多个元素到末尾a.extend([4, 5])     # [1, 10, 2, 3, 4, 5]\n\n删除元素：\na = [1, 2, 3, 4]# 删除最后一个元素a.pop()         # [1, 2, 3]# 删除指定元素（只删从左数第一个）a.remove(2)     # [1, 3]# 删除指定索引del a[0]        # [3]\n\n修改元素：\na[0] = 99\n\n查找元素：\na = [1, 2, 3, 2]# 查找第一个元素索引a.index(2)     # 1# 查找元素出现次数a.count(2)     # 2# 判断元素存在99 in a        # False\n\n4. 切片基本语法：list[start:end:step]\na = [10, 20, 30, 40]a[1:3]      # [20, 30]a[::-1]     # 倒序：[40, 30, 20, 10]\n\n高级操作：用切片修改&#x2F;删除\na = [0, 1, 2, 3, 4, 5, 6]# 替换部分长度可变a[2:5] = [99, 100]     # [0, 1, 99, 100, 5, 6]    # 删除从第1位起的所有元素a[1:] = []             # [0]\n\n5. 拷贝a = b 是引用，指向同一块内存，共用一份数据\na = [1, 2, 3]b = a        # 引用：b 和 a 指向同一块内存，共用一份数据a[0] = 99print(b)     # b也变了，输出 [99, 2, 3]\n\n浅拷贝常见的浅拷贝方法：\n\n\nb = a[:]\nb = list(a)\nimport copy copy.copy(a)\n\na = [1, 2, 3]b = a[:]     # 浅拷贝a[0] = 99print(b)     # b不变，输出 [1, 2, 3]\n\n\n深拷贝常见的浅拷贝方法：\n\nimport copy deepcopy.copy(a)\na = [[1, 2], [3, 4]]         b = a[:]                 # 浅拷贝（列表是新的，子列表还是同一个）a[0][0] = 999print(b)                 # b也变了，输出 [[999, 2], [3, 4]]import copya = [[1, 2], [3, 4]]b = copy.deepcopy(a)     # 深拷贝a[0][0] = 999print(b)                 # b不变，输出 [[1, 2], [3, 4]]\n\n6. 排序与反转a = [3, 1, 4, 2]a.sort()                   # 原地排序a.sort(reverse = True)     # 降序sorted(a)                  # 返回新排序列表，原列表不变a.reverse()                # 原地倒序\n\n元组tuple是一种有序、不可变的序列结构，用()表示\n1. 创建t = (1, 2, 3)t = 1, 2, 3t = (42,)            # 单元素元组，一定要有逗号t = ()               # 空元组t = tuple(&quot;abc&quot;)     # (&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;)\n\n2. 索引（含正负索引）正数从左数、负数从右数\nt = (10, 20, 30, 40)t[0]      # 10t[-1]     # 40\n\n3. 切片t = (10, 20, 30, 40)t[1:3]      # (20, 30)t[::-1]     # 倒序：(40, 30, 20, 10)\n\n4. 查找元素t = (1, 2, 3, 2)# 查找第一个元素索引t.index(2)     # 1# 查找元素出现次数t.count(2)     # 2# 判断元素存在99 in t        # False\n\n5. 拷贝元组一般不需要拷贝，因为元组是不可变的\n例外：元组里嵌套了列表、字典等可变对象时，可能需要深拷贝copy.deepcopy(t)\nt = (1, [2, 3])t[1].append(4)print(t)            # (1, [2, 3, 4])\n\n6. 排序与反转不支持.sort() .reverse()，因为元组是不可变的\nt = (3, 1, 4, 2)sorted(t)     # 返回新排序列表，输出 [1, 2, 3, 4]t[::-1]       # 倒序，输出 (4, 3, 2, 1)\n\n7. 打包与解包# 打包a = 1, 2, 3              # 元组 (1, 2, 3)# 解包x, y, z = a              # x=1, y=2, z=3\n\n结论\n用元组：当你只需要查，不需要改\n用列表：当你需要改\n\n","categories":["学习笔记"],"tags":["Python"]},{"title":"你好，博客世界！","url":"/2025/05/22/hello-world/","content":"你好，博客世界！这是我在互联网上的第一篇博客（给它鼓鼓掌）。作为一个刚刚开始折腾技术和AI的计算机学生，我决定开个博客，记录我的成长、踩坑、还有一点点胡思乱想。\n我用Hexo折腾了一个静态博客，虽然过程不算丝滑，但是看到自己的博客上线的那一刻，有一种“Hello World”的仪式感。\n为什么写博客？因为我总是容易忘记学过的东西（笑），写下来至少以后还能翻出来复习。而且，如果未来的我看到这篇文章，应该会想说：“原来当初的我这么菜啊。”（当然，我希望那个时候我已经不菜了）\n以后想写什么？\n技术学习记录（比如AI、算法）\n好玩的项目分享\n偶尔写点科幻脑洞，比如我对脑机接口的想象\n\n总之，这是一个慢慢建设的小空间，欢迎未来的我、和任何误入这里的你，一起见证这个技术小菜鸡的进化之路。\n","categories":["随笔"],"tags":["生活"]}]