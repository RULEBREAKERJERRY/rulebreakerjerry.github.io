[{"title":"AI 入门笔记","url":"/2025/06/13/AI-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/","content":"这篇学习笔记系统梳理了人工智能入门核心内容，覆盖两大深度学习框架（PyTorch 与 TensorFlow）、三大神经网络结构（CNN、RNN、Transformer）以及三大生成模型（VAE、GAN、Diffusion）。内容简明清晰，适合初学者搭建完整知识框架，文末附带 AI 知识层次结构图，助你从零厘清 AI 世界的脉络。\n\n\n一、深度学习框架（Deep Learning Frameworks）1. PyTorch\n编程语言：Python\n特点：\n写法灵活，贴近 Python 语法\n动态图机制，调试更友好\n科研界主流框架，论文复现多\n\n\n\n2. TensorFlow\n编程语言：Python\n特点：\n静态图结构，更适合部署\n工业级优化好，适合大规模应用\n可与 Keras 配合使用，提高开发效率\n\n\n\n\n二、神经网络结构（Neural Network Architectures）1. CNN（卷积神经网络）\n全称：Convolutional Neural Network\n主要用途：图像分类、目标检测、视觉识别\n特点：\n局部感受野 + 权重共享\n能提取图像中边缘、纹理等空间特征\n\n\n\n2. RNN（循环神经网络）\n全称：Recurrent Neural Network\n主要用途：时间序列预测、语音识别、传统NLP任务\n特点：\n处理序列数据，前一个时刻会影响当前输出\n可建模时间依赖关系\n\n\n\n3. Transformer\n主要用途：文本生成、图像描述、多模态任务\n特点：\n自注意力机制（Self-Attention）建模全局信息\n高度并行化，训练效率高\n是 GPT、BERT、DALL·E、Stable Diffusion 等模型的基础结构\n\n\n\n\n三、生成模型（Generative Models）1. VAE（变分自编码器）\n全称：Variational AutoEncoder\n原理：编码–解码结构中加入高斯噪声，实现多样性生成\n特点：\n训练稳定\n生成图像清晰度较低\n\n\n\n2. GAN（生成对抗网络）\n全称：Generative Adversarial Network\n原理：生成器与判别器博弈，提升生成图像的真实度\n特点：\n生成图像非常逼真\n训练过程容易不稳定\n\n\n\n3. Diffusion Model（扩散模型）\n原理：从噪声逐步反向恢复图像（去噪过程）\n特点：\n稳定性好\n生成质量高（主流AI绘画模型的核心）\n\n\n\n\n四、知识层次结构图人工智能（AI）\n│\n├── 机器学习（Machine Learning）\n│   └── 深度学习（Deep Learning）\n│       ├── 框架\n│       │   ├── PyTorch\n│       │   └── TensorFlow\n│       │\n│       ├── 神经网络结构\n│       │   ├── CNN（图像方向）\n│       │   ├── RNN（序列方向）\n│       │   └── Transformer\n│       │\n│       └── 生成模型（Generative Models）\n│           ├── VAE\n│           ├── GAN\n│           └── Diffusion\n\n","categories":["学习笔记"],"tags":["深度学习","PyTorch","Transformer","深度学习框架","神经网络结构","生成模型"]},{"title":"Python 入门笔记","url":"/2025/06/05/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/","content":"这篇学习笔记系统总结了 Python 编程的核心语法与常见技巧，涵盖大量代码示例与解释，适合 Python 初学者快速掌握实用知识。内容轻松易懂、示例丰富，是你写出第一个 Python 项目的起点。\n\n\n一、算术运算符\n\n\n运算符\n名称\n示例\n结果\n\n\n\n+\n加法\n3 + 2\n5\n\n\n-\n减法\n3 - 2\n1\n\n\n*\n乘法\n3 * 2\n6\n\n\n/\n除法\n3 / 2\n1.5\n\n\n//\n地板除法\n3 // 2\n1 （向下取整）\n\n\n%\n取余（模）\n3 % 2\n1\n\n\n**\n幂运算\n2 ** 3\n8（2 的 3 次方）\n\n\n\n二、逻辑运算符1. 与C语言、Java等语言的区别:Python 使用的是：\n\nand,or,not\n而不是：&amp;&amp;,||,!（这是 C &#x2F; Java 风格）\n\n2. 运算优先级（从高到低）\nnot\nand\nor\n\n3. Python的“真值规则”Python中，除了False之外，下列也被当作“假”：\nFalse, None, 0, 0.0, &quot;&quot;, [], &#123;&#125;, set()\n\n其它值都被当作“真”\n4. 非布尔值的“返回值规则”Python中and和or不仅返回True&#x2F;False，还会返回实际对象本身\nprint(0 and 100)         # 0（因为0为假）print(1 and 100)         # 100（因为1为真，所以返回第二个）print([] or &quot;Hello&quot;)     # &quot;Hello&quot;（因为[]为假）\n\n\n三、输入1. 单变量n = input()          # 返回字符串n = int(input())     # 返回整数\n\n2. 多变量m, n = input().split()              # 返回字符串m, n = map(int,input().split())     # 返回整数\n\n\n\nsplit()默认按空格分割,也可以用split(&#39;,&#39;)等等自定义分隔符\nmap(int, ...)可以一次性把所有输入转换成整数\n\n\n如果整数、浮点数、字符串在一行中输入，可以这样：\na_str, b_str, c = input().split()a = int(a_str)b = float(b_str)\n\n或者这样：\ninputs = input().split()a = int(inputs[0])b = float(inputs[1])c = inputs[2]\n\n如果输入的是不定个数的变量，可以这样：\nlst = list(map(int, input().split()))\n\n\n四、输出1. 格式化输出(f-string)name = &quot;哈基米&quot;age = 18print(f&quot;我叫&#123;name&#125;，今年&#123;age&#125;岁&quot;)\n\n可以直接在大括号里运算：\nprint(f&quot;明年我&#123;age + 1&#125;岁&quot;)\n\n可以保留两位小数：\npi = 3.1415926print(f&quot;π ≈ &#123;pi:.2f&#125;&quot;)  # π ≈ 3.14\n\n2. 一行输出用print(..., end = &#39; &#39;)是最常用方式：\nfor i in range(1, 16):    print(i, end = &#x27; &#x27;)\n\nend = &#39; &#39;会让print()输出后不换行，而是加个空格\n\nf-string可以这样写：\nfor i in range(1, 16):    print(f&quot;&#123;i&#125;&quot;, end = &#x27; &#x27;)\n\n3. 十进制、八进制、十六进制、二进制之间转换转八进制用oct()函数，转十六进制用hex()函数，转二进制用bin()函数：\n# 十进制转八进制（前缀 0o）octal = oct(123)           # &#x27;0o173&#x27;# 十进制转十六进制（前缀 0x）hexadecimal = hex(123)     # &#x27;0x7b&#x27;# 十进制转二进制（前缀 0b）binary = bin(123)          # &#x27;0b1111011&#x27;\n\n输出带前缀，或者输出大写十六进制，可以这样：\nprint(f&quot;&#123;255:x&#125;&quot;)      # ffprint(f&quot;&#123;255:X&#125;&quot;)      # FFprint(f&quot;&#123;255:#x&#125;&quot;)     # 0xffprint(f&quot;&#123;255:#X&#125;&quot;)     # 0XFF\n\n转十进制只需用int()函数：\n# 八进制字符串转十进制decimal1 = int(&#x27;173&#x27;, 8)         # 123# 十六进制字符串转十进制decimal2 = int(&#x27;7b&#x27;, 16)         # 123# 二进制字符串转十进制decimal3 = int(&#x27;1111011&#x27;, 2)     # 123\n\n传入的参数不带0x或0o，想写带前缀的也行，但必须是合法格式：\nint(&#x27;0x7b&#x27;, 16)     # 123int(&#x27;0o173&#x27;, 8)     # 123\n\n\n五、分支结构1. 三目运算符三目运算符的结构是：\n结果 = 值1 if 条件 else 值2\n\n\n\n如果条件为真，就返回值1\n否则返回值2\n\n\n典型用途场景：\n\n\n\n场景\n示例代码\n\n\n\n变量赋值时按条件取值\nmax_val = a if a &gt; b else b\n\n\n一行返回函数结果\nreturn &quot;YES&quot; if flag else &quot;NO&quot;\n\n\n列表推导式中配合使用\n[x if x % 2 == 0 else 0 for x in nums]\n\n\n2. 判断容器是否为空：if not xxx:\n\n\n类型\n空值\n示例\n布尔值\n\n\n\n列表\n[]\nif not my_list:\nFalse\n\n\n元组\n()\nif not my_tuple:\nFalse\n\n\n字典\n&#123;&#125;\nif not my_dict:\nFalse\n\n\n集合\nset()\nif not my_set:\nFalse\n\n\n字符串\n&quot;&quot;\nif not my_str:\nFalse\n\n\nrange对象\nrange(0)\nif not my_range:\nFalse\n\n\n\n六、循环结构循环结构的结构是：\nfor 变量 in 可迭代对象:    循环体代码\n\n\n\n变量：每轮循环自动赋值用的变量名\n可迭代对象：比如list、tuple、str、range等\n循环体：你想让它一遍遍干的事\n\n\n1. 遍历列表、元组、字符串等for fruit in [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;]:    print(fruit)\n\nfor fruit in (&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;):    print(fruit)\n\nfor char in &quot;hello&quot;:    print(char)\n\n2. range()函数for i in range(5):             # i 从 0 到 4for i in range(1, 6):          # i 从 1 到 5for i in range(10, 0, -2):     # i 从 10 倒着减 2 到 1\n\n3. enumerate()函数同时拿到索引和值for index, value in enumerate([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]):    print(index, value)&#x27;&#x27;&#x27;0 a1 b2 c&#x27;&#x27;&#x27;\n\n4. zip()函数同时遍历两个列表names = [&#x27;Tom&#x27;, &#x27;Jerry&#x27;]scores = [90, 95]for name, score in zip(names, scores):    print(f&quot;&#123;name&#125; got &#123;score&#125;&quot;)&#x27;&#x27;&#x27;Tom got 90Jerry got 95&#x27;&#x27;&#x27;\n\n5. 列表推导式squares = [x**2 for x in range(5)]     # x 从 0 到 4print(squares)     # [0, 1, 4, 9, 16]\n\nevens = [x for x in range(10) if x % 2 == 0]print(evens)     # [0, 2, 4, 6, 8]\n\n6. 常用控制语句\nbreak: 跳出整个循环\nfor i in range(10):    if i == 5:        break    print(i)&#x27;&#x27;&#x27;01234&#x27;&#x27;&#x27;\n\ncontinue: 跳过当前这次循环\nfor i in range(5):    if i == 2:        continue    print(i)&#x27;&#x27;&#x27;0134&#x27;&#x27;&#x27;\n\nelse: 循环正常执行完（没被break），就会执行这个else块\nfor i in range(5):    if i == 10:        breakelse:    print(&quot;Loop finished normally!&quot;)# Loop finished normally!\n\n\n七、函数\n八、字符串字符串不可变，可以用&#39;单引号&#39;、&quot;双引号&quot;或&#39;&#39;&#39;三引号&#39;&#39;&#39;（多行字符串）定义\n1. 索引（含正负索引）正数从左数、负数从右数\ns = &quot;hello&quot;s[0]      # &quot;h&quot;s[-1]     # &quot;o&quot;   \n\n2. 切片：s[start:end:step]s = &quot;HelloWorld&quot;s[0:5]      # &quot;Hello&quot;s[::-1]     # 倒序：&quot;dlroWolleH&quot;s[::2]      # &quot;Hlool&quot;\n\n3. 获取长度：len()s = &quot;hello&quot;print(len(s))   # 5，表示字符个数\n\n4. 查找字符&#x2F;子串：find()、rfind()、index()s = &quot;abcdedcba&quot;print(s.find(&quot;a&quot;))      # 0，返回第一个a的位置print(s.rfind(&quot;a&quot;))     # 10，返回最后一个a的位置print(s.find(&quot;z&quot;))      # -1，找不到返回-1print(s.index(&quot;a&quot;))     # 0，返回第一个a的索引\n\n5. 统计字符&#x2F;子串出现次数：count()s = &quot;banana&quot;print(s.count(&quot;a&quot;))       # 3print(s.count(&quot;na&quot;))      # 2print(s.count(&#x27;ana&#x27;))     # 1，非重叠计数\n\n6. 去空格：strip()、lstrip()、rstrip()s = &quot;  hello  &quot;print(s.strip())      # &quot;hello&quot;print(s.lstrip())     # &quot;hello  &quot;print(s.rstrip())     # &quot;  hello&quot;\n\n7. 替换字符：replace(old, new)s = &quot;yes yes yes&quot;print(s.replace(&quot;yes&quot;, &quot;no&quot;))     # &quot;no no no no&quot;\n\n8. 分割与连接：split()和join()分割split()：字符串 → 列表\ns = &quot;apple banana orange&quot;     a = s.split()print(a)     # [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;orange&#x27;]\n\ns = &quot;apple,banana,orange&quot;     a = s.split(&quot;,&quot;)print(a)     # [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;orange&#x27;]\n\n连接join()：列表 → 字符串\na = [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;orange&#x27;]     b = &quot; &quot;.join(a)print(b)     # &quot;apple banana orange&quot;\n\na = [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;orange&#x27;]b = &quot;,&quot;.join(a)print(b)     # &quot;apple,banana,orange&quot;\n\n9. 大小写转换：lower()、upper()、casefold()、capitalize()s = &quot;PyThon&quot;print(s.lower())          # &quot;python&quot;print(s.upper())          # &quot;PYTHON&quot;print(s.casefold())       # &quot;python&quot;print(s.capitalize())     # &quot;Python&quot;\n\n10. 判断内容：isdigit()、isalpha()、isalnum()、isspace()print(&quot;123&quot;.isdigit())        # True，纯数字print(&quot;abc&quot;.isalpha())        # True，纯字母print(&quot;abc123&quot;.isalnum())     # True，字母+数字print(&quot;   &quot;.isspace())        # True，空格串\n\n11. 判断开头&#x2F;结尾：startswith()、endswith()s = &quot;PythonLearning.md&quot;print(s.startswith(&quot;Py&quot;))     # Trueprint(s.endswith(&quot;.md&quot;))      # True\n\n\n九、列表list是一种有序、可变的序列结构，用[]表示\n1. 创建a = [1, 2, 3]a = list(&quot;abc&quot;)     # [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]\n\n2. 索引（含正负索引）正数从左数、负数从右数\na = [10, 20, 30, 40]a[0]      # 10a[-1]     # 40\n\n3. 增删改查\n添加元素：\na = [1, 2]# 加一个元素到末尾a.append(3)          # [1, 2, 3]# 指定索引插入一个元素a.insert(1, 10)      # [1, 10, 2, 3]# 加多个元素到末尾a.extend([4, 5])     # [1, 10, 2, 3, 4, 5]\n\n删除元素：\na = [1, 2, 3, 4]# 删除最后一个元素a.pop()         # [1, 2, 3]# 删除指定元素（只删从左数第一个）a.remove(2)     # [1, 3]# 删除指定索引del a[0]        # [3]# 清空整个字典a.clear()       # []\n\n修改元素：\na[0] = 99\n\n查找元素：\na = [1, 2, 3, 2]# 查找第一个元素索引a.index(2)     # 1# 查找元素出现次数a.count(2)     # 2# 判断元素存在99 in a        # False\n\n4. 切片基本语法：list[start:end:step]\na = [10, 20, 30, 40]a[1:3]      # [20, 30]a[::-1]     # 倒序：[40, 30, 20, 10]\n\n高级操作：用切片修改&#x2F;删除\na = [0, 1, 2, 3, 4, 5, 6]# 替换部分长度可变a[2:5] = [99, 100]     # [0, 1, 99, 100, 5, 6]    # 删除从第1位起的所有元素a[1:] = []             # [0]\n\n5. 拷贝a = b 是引用，指向同一块内存，共用一份数据\na = [1, 2, 3]b = a        # 引用：b 和 a 指向同一块内存，共用一份数据a[0] = 99print(b)     # b也变了，输出 [99, 2, 3]\n\n常见的拷贝方法：\n\n\n\n方法\n说明\n\n\n\nb = a[:]\n浅拷贝\n\n\nb = list(a)\n浅拷贝\n\n\nimport copy; copy.copy(a)\n浅拷贝\n\n\nimport copy; copy.deepcopy(a)\n深拷贝（用于嵌套列表）\n\n\n浅拷贝：\na = [1, 2, 3]b = a[:]     # 浅拷贝a[0] = 99print(b)     # b不变，输出 [1, 2, 3]\n\n深拷贝：\na = [[1, 2], [3, 4]]         b = a[:]                 # 浅拷贝（列表是新的，子列表还是同一个）a[0][0] = 999print(b)                 # b也变了，输出 [[999, 2], [3, 4]]import copya = [[1, 2], [3, 4]]b = copy.deepcopy(a)     # 深拷贝a[0][0] = 999print(b)                 # b不变，输出 [[1, 2], [3, 4]]\n\n6. 排序与反转a = [3, 1, 4, 2]a.sort()                   # 原地排序a.sort(reverse = True)     # 降序sorted(a)                  # 返回新排序列表，原列表不变a.reverse()                # 原地倒序\n\n\n十、元组tuple是一种有序、不可变的序列结构，用()表示\n1. 创建t = (1, 2, 3)t = 1, 2, 3t = (42,)            # 单元素元组，一定要有逗号t = ()               # 空元组t = tuple(&quot;abc&quot;)     # (&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;)\n\n2. 索引（含正负索引）正数从左数、负数从右数\nt = (10, 20, 30, 40)t[0]      # 10t[-1]     # 40\n\n3. 切片t = (10, 20, 30, 40)t[1:3]      # (20, 30)t[::-1]     # 倒序：(40, 30, 20, 10)\n\n4. 查找元素t = (1, 2, 3, 2)# 查找第一个元素索引t.index(2)     # 1# 查找元素出现次数t.count(2)     # 2# 判断元素存在99 in t        # False\n\n5. 拷贝元组一般不需要拷贝，因为元组是不可变的\n例外：元组里嵌套了列表、字典等可变对象时，可能需要深拷贝copy.deepcopy(t)\nt = (1, [2, 3])t[1].append(4)print(t)            # (1, [2, 3, 4])\n\n6. 排序与反转不支持.sort() .reverse()，因为元组是不可变的\nt = (3, 1, 4, 2)sorted(t)     # 返回新排序列表，输出 [1, 2, 3, 4]t[::-1]       # 倒序，输出 (4, 3, 2, 1)\n\n7. 打包与解包# 打包a = 1, 2, 3              # 元组 (1, 2, 3)# 解包x, y, z = a              # x=1, y=2, z=3\n\n8. 结论\n用元组：当你只需要查，不需要改\n用列表：当你需要改\n\n\n十一、字典dict每一对&quot;键: 值&quot;叫一个项（item），键必须唯一，值可以重复\n它的结构是：\nmy_dict = &#123;    &quot;name&quot;: &quot;哈基米&quot;,    &quot;age&quot;: 18&#125;\n\n1. 创建d = &#123;&quot;apple&quot;: 3, &quot;banana&quot;: 5&#125;d = dict(apple = 3, banana = 5)\n\n2. 取值d = &#123;&quot;apple&quot;: 3, &quot;banana&quot;: 5&#125;# 所有键d.keys()       # dict_keys([&#x27;apple&#x27;, &#x27;banana&#x27;])# 所有值d.values()     # dict_values([3, 5])# 所有键值对d.items()      # dict_items([(&#x27;apple&#x27;, 3), (&#x27;banana&#x27;, 5)])\n\n3. 查找d = &#123;&quot;apple&quot;: 3, &quot;banana&quot;: 5&#125;# 直接查找，存在则返回值，不存在则报错d[&quot;apple&quot;]             # 3d[&quot;orange&quot;]            # KeyError\n\nd = &#123;&quot;apple&quot;: 3, &quot;banana&quot;: 5&#125;# 安全查找，不存在返回None或默认值d.get(&quot;apple&quot;)         # 3d.get(&quot;orange&quot;)        # Noned.get(&quot;orange&quot;, 0)     # 0,字典中并没有&quot;orange&quot;这个键\n\nd = &#123;&quot;apple&quot;: 3, &quot;banana&quot;: 5&#125;# 判断是否存在指定键，返回True/False&quot;apple&quot; in d      # True&quot;orange&quot; in d     # False\n\n4. 添加&#x2F;修改d = &#123;&quot;apple&quot;: 3, &quot;banana&quot;: 5&#125;# 添加键值对d[&quot;orange&quot;] = 7      # d = &#123;&#x27;apple&#x27;: 3, &#x27;banana&#x27;: 5, &#x27;orange&#x27;: 7&#125;# 修改键值对d[&quot;banana&quot;] = 25     # d = &#123;&#x27;apple&#x27;: 3, &#x27;banana&#x27;: 25, &#x27;orange&#x27;: 7&#125; \n\nd = &#123;&quot;apple&quot;: 3, &quot;banana&quot;: 5&#125;# 安全设置默认值（如果没有就添加）d.setdefault(&quot;apple&quot;, 9)  # 不会改变原来的&quot;apple&quot;的值d.setdefault(&quot;arange&quot;, 7)  # d = &#123;&#x27;apple&#x27;: 3, &#x27;banana&#x27;: 5, &#x27;orange&#x27;: 7&#125;\n\nd = &#123;&quot;apple&quot;: 3, &quot;banana&quot;: 5&#125;# 合并字典 or 添加/修改d.update(&#123;&quot;apple&quot;: 9, &quot;banana&quot;: 25, &quot;orange&quot;: 7&#125;)     # d = &#123;&#x27;apple&#x27;: 9, &#x27;banana&#x27;: 25, &#x27;orange&#x27;: 7&#125;\n\n5. 删除d = &#123;&quot;apple&quot;: 3, &quot;banana&quot;: 5&#125;# 删除指定键del d[&quot;banana&quot;]            # d = &#123;&#x27;apple&#x27;: 3&#125;\n\nd = &#123;&quot;apple&quot;: 3, &quot;banana&quot;: 5&#125;# 删除指定键并返回值value = d.pop(&quot;apple&quot;)     # value = 3, d = &#123;&#x27;banana&#x27;: 5&#125;\n\nd = &#123;&quot;apple&quot;: 3, &quot;banana&quot;: 5&#125;# 清空整个字典d.clear()                  # d = &#123;&#125;\n\nd = &#123;&quot;apple&quot;: 3, &quot;banana&quot;: 5&#125;# 删除一个键并返回值（Python3.7+默认是“弹出最后一项”，早期版本是随机的）value = d.popitem()     # value = (&#x27;banana&#x27;, 5), d = &#123;&#x27;apple&#x27;: 3&#125;\n\n6. 遍历d = &#123;&quot;apple&quot;: 3, &quot;banana&quot;: 5&#125;for k in d:    print(f&quot;&#123;k&#125;&quot;)&#x27;&#x27;&#x27;applebanana&#x27;&#x27;&#x27;\n\nfor k, v in d.items():    print(f&quot;&#123;k&#125; -&gt; &#123;v&#125;&quot;)   &#x27;&#x27;&#x27;  apple -&gt; 3banana -&gt; 5&#x27;&#x27;&#x27;\n\n7. 拷贝d1 = &#123;&quot;apple&quot;: 3, &quot;banana&quot;: 5&#125;d2 = d1.copy()d2[&quot;apple&quot;] = 9     # 原字典不变# d1 = &#123;&#x27;apple&#x27;: 3, &#x27;banana&#x27;: 5&#125;, d2 = &#123;&#x27;apple&#x27;: 9, &#x27;banana&#x27;: 5&#125;\n\n\n十二、集合","categories":["学习笔记"],"tags":["Python"]},{"title":"你好，博客世界！","url":"/2025/05/22/hello-world/","content":"这是我的第一篇博客，一次对技术与写作的新尝试。从搭建 Hexo 博客到记录学习旅程，我想把成长的过程写下来，哪怕未来回头看看，会觉得现在的我很“菜”。希望这个小空间能陪我走很远，也欢迎偶然路过的你，一起见证技术小菜鸡的进化之路。\n\n\n你好，博客世界！这是我在互联网上的第一篇博客（给它鼓鼓掌）。作为一个刚刚开始折腾技术和AI的计算机学生，我决定开个博客，记录我的成长、踩坑、还有一点点胡思乱想。\n我用Hexo折腾了一个静态博客，虽然过程不算丝滑，但是看到自己的博客上线的那一刻，有一种“Hello World”的仪式感。\n为什么写博客？因为我总是容易忘记学过的东西（笑），写下来至少以后还能翻出来复习。而且，如果未来的我看到这篇文章，应该会想说：“原来当初的我这么菜啊。”（当然，我希望那个时候我已经不菜了）\n以后想写什么？\n技术学习记录（比如AI、算法）\n好玩的项目分享\n偶尔写点科幻脑洞，比如我对脑机接口的想象\n\n总之，这是一个慢慢建设的小空间，欢迎未来的我、和任何误入这里的你，一起见证这个技术小菜鸡的进化之路。\n","categories":["随笔"],"tags":["生活"]}]